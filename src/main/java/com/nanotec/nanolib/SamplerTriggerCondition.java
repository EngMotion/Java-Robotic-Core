/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.nanotec.nanolib;

public final class SamplerTriggerCondition {
  public final static SamplerTriggerCondition TC_FALSE = new SamplerTriggerCondition("TC_FALSE", NanolibJNI.SamplerTriggerCondition_TC_FALSE_get());
  public final static SamplerTriggerCondition TC_TRUE = new SamplerTriggerCondition("TC_TRUE", NanolibJNI.SamplerTriggerCondition_TC_TRUE_get());
  public final static SamplerTriggerCondition TC_SET = new SamplerTriggerCondition("TC_SET", NanolibJNI.SamplerTriggerCondition_TC_SET_get());
  public final static SamplerTriggerCondition TC_CLEAR = new SamplerTriggerCondition("TC_CLEAR", NanolibJNI.SamplerTriggerCondition_TC_CLEAR_get());
  public final static SamplerTriggerCondition TC_RISING_EDGE = new SamplerTriggerCondition("TC_RISING_EDGE", NanolibJNI.SamplerTriggerCondition_TC_RISING_EDGE_get());
  public final static SamplerTriggerCondition TC_FALLING_EDGE = new SamplerTriggerCondition("TC_FALLING_EDGE", NanolibJNI.SamplerTriggerCondition_TC_FALLING_EDGE_get());
  public final static SamplerTriggerCondition TC_BIT_TOGGLE = new SamplerTriggerCondition("TC_BIT_TOGGLE", NanolibJNI.SamplerTriggerCondition_TC_BIT_TOGGLE_get());
  public final static SamplerTriggerCondition TC_GREATER = new SamplerTriggerCondition("TC_GREATER", NanolibJNI.SamplerTriggerCondition_TC_GREATER_get());
  public final static SamplerTriggerCondition TC_GREATER_OR_EQUAL = new SamplerTriggerCondition("TC_GREATER_OR_EQUAL", NanolibJNI.SamplerTriggerCondition_TC_GREATER_OR_EQUAL_get());
  public final static SamplerTriggerCondition TC_LESS = new SamplerTriggerCondition("TC_LESS", NanolibJNI.SamplerTriggerCondition_TC_LESS_get());
  public final static SamplerTriggerCondition TC_LESS_OR_EQUAL = new SamplerTriggerCondition("TC_LESS_OR_EQUAL", NanolibJNI.SamplerTriggerCondition_TC_LESS_OR_EQUAL_get());
  public final static SamplerTriggerCondition TC_EQUAL = new SamplerTriggerCondition("TC_EQUAL", NanolibJNI.SamplerTriggerCondition_TC_EQUAL_get());
  public final static SamplerTriggerCondition TC_NOT_EQUAL = new SamplerTriggerCondition("TC_NOT_EQUAL", NanolibJNI.SamplerTriggerCondition_TC_NOT_EQUAL_get());
  public final static SamplerTriggerCondition TC_ONE_EDGE = new SamplerTriggerCondition("TC_ONE_EDGE", NanolibJNI.SamplerTriggerCondition_TC_ONE_EDGE_get());
  public final static SamplerTriggerCondition TC_MULTI_EDGE = new SamplerTriggerCondition("TC_MULTI_EDGE", NanolibJNI.SamplerTriggerCondition_TC_MULTI_EDGE_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static SamplerTriggerCondition swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + SamplerTriggerCondition.class + " with value " + swigValue);
  }

  private SamplerTriggerCondition(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private SamplerTriggerCondition(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private SamplerTriggerCondition(String swigName, SamplerTriggerCondition swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static SamplerTriggerCondition[] swigValues = { TC_FALSE, TC_TRUE, TC_SET, TC_CLEAR, TC_RISING_EDGE, TC_FALLING_EDGE, TC_BIT_TOGGLE, TC_GREATER, TC_GREATER_OR_EQUAL, TC_LESS, TC_LESS_OR_EQUAL, TC_EQUAL, TC_NOT_EQUAL, TC_ONE_EDGE, TC_MULTI_EDGE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}


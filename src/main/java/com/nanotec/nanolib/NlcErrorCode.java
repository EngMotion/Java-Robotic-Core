/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.nanotec.nanolib;

public final class NlcErrorCode {
  public final static NlcErrorCode Success = new NlcErrorCode("Success", NanolibJNI.NlcErrorCode_Success_get());
  public final static NlcErrorCode GeneralError = new NlcErrorCode("GeneralError", NanolibJNI.NlcErrorCode_GeneralError_get());
  public final static NlcErrorCode BusUnavailable = new NlcErrorCode("BusUnavailable", NanolibJNI.NlcErrorCode_BusUnavailable_get());
  public final static NlcErrorCode CommunicationError = new NlcErrorCode("CommunicationError", NanolibJNI.NlcErrorCode_CommunicationError_get());
  public final static NlcErrorCode ProtocolError = new NlcErrorCode("ProtocolError", NanolibJNI.NlcErrorCode_ProtocolError_get());
  public final static NlcErrorCode ODDoesNotExist = new NlcErrorCode("ODDoesNotExist", NanolibJNI.NlcErrorCode_ODDoesNotExist_get());
  public final static NlcErrorCode ODInvalidAccess = new NlcErrorCode("ODInvalidAccess");
  public final static NlcErrorCode ODTypeMismatch = new NlcErrorCode("ODTypeMismatch");
  public final static NlcErrorCode OperationAborted = new NlcErrorCode("OperationAborted", NanolibJNI.NlcErrorCode_OperationAborted_get());
  public final static NlcErrorCode OperationNotSupported = new NlcErrorCode("OperationNotSupported", NanolibJNI.NlcErrorCode_OperationNotSupported_get());
  public final static NlcErrorCode InvalidOperation = new NlcErrorCode("InvalidOperation");
  public final static NlcErrorCode InvalidArguments = new NlcErrorCode("InvalidArguments");
  public final static NlcErrorCode AccessDenied = new NlcErrorCode("AccessDenied");
  public final static NlcErrorCode ResourceNotFound = new NlcErrorCode("ResourceNotFound");
  public final static NlcErrorCode ResourceUnavailable = new NlcErrorCode("ResourceUnavailable");
  public final static NlcErrorCode OutOfMemory = new NlcErrorCode("OutOfMemory");
  public final static NlcErrorCode TimeoutError = new NlcErrorCode("TimeoutError");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static NlcErrorCode swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + NlcErrorCode.class + " with value " + swigValue);
  }

  private NlcErrorCode(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private NlcErrorCode(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private NlcErrorCode(String swigName, NlcErrorCode swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static NlcErrorCode[] swigValues = { Success, GeneralError, BusUnavailable, CommunicationError, ProtocolError, ODDoesNotExist, ODInvalidAccess, ODTypeMismatch, OperationAborted, OperationNotSupported, InvalidOperation, InvalidArguments, AccessDenied, ResourceNotFound, ResourceUnavailable, OutOfMemory, TimeoutError };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}


package com.lucaf.robotic_core.UI;

import com.fazecast.jSerialComm.SerialPort;
import com.ghgande.j2mod.modbus.Modbus;
import com.ghgande.j2mod.modbus.facade.ModbusSerialMaster;
import com.ghgande.j2mod.modbus.util.SerialParameters;
import com.lucaf.robotic_core.DH_ROBOTICS.RGI100_22.RGI100_22;
import jssc.SerialPortException;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.util.HashMap;

public class DH_Robotics extends JFrame {
    /**
     * Creates new form Configurator
     */
    public DH_Robotics() {
        initComponents();
        updateSerialPorts();
    }
    public void updateSerialPorts() {
        port_selection.setModel(new DefaultComboBoxModel<>());
        SerialPort[] ports = SerialPort.getCommPorts();
        for (SerialPort port : ports) {
            port_selection.addItem(port.getSystemPortName());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        port_selection = new JComboBox<>();
        serial_port_label = new JLabel();
        reload_ports = new JButton();
        send_update = new JButton();
        new_id_label = new JLabel();
        new_id_input = new JTextField();
        current_id_label = new JLabel();
        current_id_label.setText("Current ID");

        current_id_input = new JTextField();
        current_id_input.setText("01");

        serial_port_label.setText("Port");
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        reload_ports.setText("Ricarica");
        reload_ports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateSerialPorts();
            }
        });

        send_update.setText("Salva e invia");
        send_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        new_id_label.setText("New ID");
        new_id_input.setText("01");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(send_update)
                                .addGap(23, 23, 23))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(serial_port_label)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(port_selection, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(reload_ports))
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(current_id_label)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(current_id_input, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addComponent(new_id_label)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(new_id_input, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(365, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(serial_port_label)
                                        .addComponent(port_selection, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(reload_ports))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(current_id_label)
                                        .addComponent(current_id_input, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(new_id_label)
                                        .addComponent(new_id_input, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 148, Short.MAX_VALUE)
                                .addComponent(send_update)
                                .addGap(17, 17, 17))
        );

        pack();
    }

    private void jButton2ActionPerformed(ActionEvent evt) {
        ModbusSerialMaster master = null;

        try {
            SerialParameters params = new SerialParameters();
            params.setPortName(port_selection.getSelectedItem().toString());
            params.setBaudRate(115200);
            params.setDatabits(8);
            params.setParity("None");
            params.setStopbits(1);
            params.setEncoding(Modbus.SERIAL_ENCODING_RTU);
            master = new ModbusSerialMaster(
                    params
            );
            master.connect();
            byte id = Byte.parseByte(current_id_input.getText());
            int newId = Integer.parseInt(new_id_input.getText());

            RGI100_22 rgi100_22 = new RGI100_22(master, new HashMap<>(),null);
            rgi100_22.setId(id);
            if(rgi100_22.changeAddress(newId)){
                if(rgi100_22.saveConfig()){
                    JOptionPane.showMessageDialog(null, "ID cambiato con successo. Riavviare il dispositivo", "Successo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Errore durante la comunicazione", "Errore", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Errore durante la comunicazione", "Errore", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SerialPortException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            throw new RuntimeException(e);
        } finally {
            if (master != null) {
                master.disconnect();
            }
        }
    }

    /**
     * Launch the UI
     */
    public static void open() {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DH_Robotics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DH_Robotics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JButton reload_ports;
    private JButton send_update;
    private JComboBox<String> port_selection;
    private JLabel serial_port_label;
    private JLabel new_id_label;
    private JLabel current_id_label;
    private JTextField new_id_input;
    private JTextField current_id_input;
}
